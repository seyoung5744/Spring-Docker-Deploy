# Workflow의 이름을 지정합니다.
name: BackEnd - CI/CD

on:
  push:
    # main branch에 push(merge)될 경우 실행됩니다.
    branches: ["main"]

  # 수동으로 해당 workflow 실행 지정
  workflow_dispatch:

permissions:
  contents: read

env:
  S3_BUCKET_NAME: withpt-s3
  PROJECT_NAME: spring-deploy

jobs:
  build:
    # build를 진행할 운영체제를 선택합니다.
    runs-on: ubuntu-latest

    steps:
      # 작업에서 액세스할 수 있도록 $GITHUB_WORKSPACE에서 저장소를 체크아웃합니다.
      - name: Checkout
        uses: actions/checkout@v3

      # JDK를 11 버전으로 셋팅합니다.
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # Gradle을 캐싱해둡니다 -> 빌드 속도가 증가하는 효과가 있습니다.
      - name: Gradle 캐싱
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

#      # 프로젝트 저장소에 업로드하면 안되는 설정 파일들을 만들어줍니다.
#      - name: Make application.yml
#        run: |
#          # src/main 으로 경로를 이동합니다.
#           cd ./src/main
#           # src/main 경로에 resources 폴더를 만들어줍니다.
#           mkdir resources
#           cd ./resources
#           # 필요한 yml 파일들을 만들어줍니다.
#           touch ./application.yml
#           touch ./application-aws.yml
#           touch ./application-oauth.yml
#           touch ./application-app.yml
#           # 등록해둔 Github Secrets의 내용을 이용해서 yml 파일의 내용을 써줍니다.
#           echo "$APPLICATION_OAUTH" > ./application-oauth.yml
#           echo "$APPLICATION_APP" > ./application-app.yml
#           echo "$APPLICATION" > ./application.yml
#           echo "$APPLICATION_AWS" > ./application-aws.yml

#        env:
#          APPLICATION_OAUTH: ${{ secrets.APPLICATION_OAUTH }}
#          APPLICATION_APP: ${{ secrets.APPLICATION_APP }}
#          APPLICATION: ${{ secrets.APPLICATION }}
#          APPLICATION_AWS: ${{ secrets.APPLICATION_AWS }}
#        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        shell: bash

      - name: Build with Gradle
        run: ./gradlew build
        shell: bash


      # 배포에 필요한 여러 설정 파일과 프로젝트 빌드파일을 zip 파일로 모아줍니다.
      - name: zip file 생성
        run: |
          mkdir deploy
          cp ./docker/docker-compose.blue.yml ./deploy/
          cp ./docker/docker-compose.green.yml ./deploy/
          cp ./appspec.yml ./deploy/
          cp ./docker/Dockerfile ./deploy/
          cp ./build/libs/*.jar ./deploy/
          zip -r -qq -j ./spring-build.zip ./deploy
      

      # AWS에 연결해줍니다.
      - name: AWS 연결
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # S3에 프로젝트를 업로드 합니다.
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

      - name: Code Deploy
        run: aws deploy create-deployment --application-name WithPT-CodeDeploy 
          --deployment-config-name CodeDeployDefault.AllAtOnce 
          --deployment-group-name WithPT-Deploy-Group 
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/spring-build.zip
